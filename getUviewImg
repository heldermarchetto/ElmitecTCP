# -*- coding: utf-8 -*-
"""
Created on Mon Jan 18 17:47:16 2016
@author: Helder Marchetto
Scope: import image from Uview .dat files.
Use: img = getUviewImg(fn)
where fn is a single filename
"""
import struct
import numpy as np

def getUviewImg(fn):
    with open(fn, mode='rb') as file:
        fileContent = file.read()
    #define some constants useful later on
    headerSize = 104 #headerSize is always 104 bytes
    imageHeaderSize = 288
    recipeBlockSize = 128
    
    #get the image width and height
    imageWidth  = struct.unpack('h',fileContent[40:42])[0]
    imageHeight = struct.unpack('h',fileContent[42:44])[0]
    #get the image version to find the recipe size
    UK_version  = struct.unpack('h',fileContent[22:24])[0]
    if UK_version >= 7:
        attachedRecipeSize = struct.unpack('h',fileContent[46:48])[0]
        hasRecipe = attachedRecipeSize > 0
    else:
        attachedRecipeSize = struct.unpack('h','\x00\x00')[0]
        hasRecipe = attachedRecipeSize > 0
    #define the filePointer length
    if hasRecipe:
        filePointer = headerSize+recipeBlockSize #recipe is always 128 bytes
    else:
        filePointer = headerSize
    
    #the attachedMarkupSize is zero unless otherwise
    attachedMarkupSize = struct.unpack('h',fileContent[filePointer+22:filePointer+24])[0]
    hasAttachedMarkup = attachedMarkupSize != 0
    if hasAttachedMarkup:
        attachedMarkupSize = 128*((attachedMarkupSize/128)+1)
    else:
        attachedMarkupSize = 0
    
    LEEMDataVersion = struct.unpack('h',fileContent[filePointer+26:filePointer+28])[0]
    
    totalHeaderSize = headerSize + attachedRecipeSize + imageHeaderSize + attachedMarkupSize + LEEMDataVersion
    
#    print "Total header size = "
#    print "headerSize=",str(headerSize)
#    print "attachedRecipeSize=",str(attachedRecipeSize)
#    print "imageHeaderSize=",str(imageHeaderSize)
#    print "attachedMarkupSize=",str(attachedMarkupSize)
#    print "LEEMDataVersion=",str(LEEMDataVersion)
#    print "Total header size = ", totalHeaderSize
    
#    return np.asarray(np.reshape(struct.unpack(str(imageWidth*imageHeight)+'H',fileContent[totalHeaderSize:]), (imageWidth, imageHeight)))
    retImg = np.reshape(struct.unpack(str(imageWidth*imageHeight)+'H',fileContent[totalHeaderSize:]), (imageWidth, imageHeight))    
    return retImg 


